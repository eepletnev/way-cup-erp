    /** @jsx React.DOM */       React.initializeTouchEvents(true);  function showToolTip(data) {        $('#tooltip').hide();        $('#tooltip').fadeIn('fast');        $('#tooltipText').html(data);  }    var TouchMixin = {      touched: false,      handleTouch: function(fn) {        this.touched = true;        typeof fn === 'string' ? this[fn]() : this.touchedOrClicked(fn);      },      handleClick: function(fn) {        if (this.touched) return this.touched = false;        typeof fn === 'string' ? this[fn]() : this.touchedOrClicked(fn);      }    };            var clientHandler = React.createClass({            getInitialState: function(){                return { name: '', coffees: 0, bonuses: 0, cardnum : 0, client: 0, thisIsANewOne : 0 };            },            onChangeHandle: function(e){                if ((typeof(e) != 'undefined') || (this.refs.cardnum.getDOMNode().value.trim() == '')){                    this.submitHandle(e);                }            },            submitHandle: function(e){                if (typeof(e) != 'undefined') {                    e.preventDefault();                }                    var cardnum = this.refs.cardnum.getDOMNode().value.trim();                    var self = this;                    if (cardnum != '') {                                $( "#cardnum" ).autocomplete({                                      minLength: 1,                                      source: function(request, response) {                                        var query = 'api.php?action=clientSearch&query=' + cardnum;                                        $.get(query, {                                            query: request.term                                        },                                         function(result) {                                            var clients = jQuery.parseJSON(result);                                             for (var i = clients.length - 1; i >= 0; i--) {                                                clients[i].value = clients[i].telephone;                                            };                                            if (clients.length == 1) {                                                $(this).val( clients[0].telephone );                                                client = clients[0];                                                self.submitHandle.call(self);                                            }                                             if (clients.length == 0) {                                                delete client;                                                self.submitHandle.call(self);                                            }                                            response(clients);                                        });                                      },                                      focus: function( event, ui ) {                                        client = ui.item;                                        self.submitHandle.call(self);                                        return false;                                      },                                      select: function( event, ui ) {                                        $(this).val( ui.item.telephone );                                        client = ui.item;                                        self.submitHandle.call(self);                                        return false;                                      }                                })                                .autocomplete( "instance" )._renderItem = function( ul, item ) {                                  return $( "<li>" )                                    .append( "<a>" + item.telephone + "<br>" + item.name + " " + item.lastname + "</a>" )                                    .appendTo( ul );                                };                                if ((typeof(client) != 'undefined') && (this.state.thisIsANewOne != 1) ){                                    this.setState({name: client.name, coffees: client.coffees, bonuses: client.coffees % 6, noBonuses: client.noBonuses, cardnum: client.id, client : client});                                } else {                                    this.setState({name: '', coffees: 0, bonuses: 0, cardnum: 0});                                            }                    } else {                        this.setState({name: '', coffees: 0, bonuses: 0, cardnum: 0});                    }                            },            componentDidMount: function(e){                this.onChangeHandle(e);            },            newClientHandle: function(e){                                if (document.getElementById('newClientInput').checked == true) {                     $( "#cardnum" ).autocomplete({ disabled: true })                    this.setState({thisIsANewOne : 1});                  } else {                    $( "#cardnum" ).autocomplete({ disabled: false })                    this.setState({thisIsANewOne : 0});                }            },            render: function(){                var clientsNameDiv;                var bonusInfo;                var comment;                if (this.state.noBonuses) {                    bonusInfo = <strong>Бонусов нет</strong>                } else {                    bonusInfo = <div>Текущее количество бонусов: <strong>{this.state.bonuses}</strong></div>                }                if (this.state.name == '') {                    clientsNameDiv = <div>По запросу {this.state.cardnum} не найден</div>                } else {                    clientsNameDiv = <div>Имя: <strong>{this.state.name}</strong>.</div>                }                if ((this.state.client.comment != '') || (this.state.client.comment !== '')) {                    comment = this.state.client.comment;                } else {                    comment = '––––';                }                return (                    <div className="menu-info-client">                    <div className="form-card-info">                        <form id="clientForm" onSubmit={this.submitHandle}>                            <label htmlFor="cardnumInput"><strong>Телефон, фамилия или карта:</strong></label>                            <input type="text" min="0" onChange={this.onChangeHandle} id='cardnum' ref='cardnum'/> <br/>                            <strong>Гость пришёл к нам впервые:</strong>                            <div className="newClient">                                <input type="checkbox" onChange={this.newClientHandle} value='1' id='newClientInput'/><br/>                                <label htmlFor="newClientInput"></label>                            </div>                        </form>                    </div>                    <div className="info-about-client-card">                    Гость #{this.state.cardnum}                    {clientsNameDiv}                    Человек купил у нас <strong>{this.state.coffees}</strong> кофе.                    <br/>                    {bonusInfo}                    Комментарий:                    <div>                    {comment}                    </div>                    </div>                    <div className="clear"></div>                    <menuAndOrder cardnum={this.state.cardnum} thisIsANewOne={this.state.thisIsANewOne}/>                </div>                );            }    });    var menuElement = React.createClass({    mixins: [TouchMixin],        touchedOrClicked: function(){            this.props.onClick(this.props.ref);        },         render: function(){            var actionTrack = '';            if (this.props.actioned != 0 && typeof(this.props.actioned) != 'undefined') {                actionTrack = ' Бесплатных: ' + this.props.actioned;            }            return (                    <li onClick={ this.handleClick } onTouchEnd={ this.handleTouch }>                        <span>{this.props.name}</span><strong>{this.props.quanity}</strong>                        <br/>                        {this.props.amount}{this.props.unit}                        {actionTrack}                        <i>{this.props.price}&#8381;</i>                                            </li>                );        }    });    var menuAndOrder = React.createClass({        getInitialState: function(){            return { total: 0, menuElements: [], orderElements: [], menuCategories: [], orderClickAction: 'remove'};        },                kEbenyam: function(){            var menuElements = this.state.menuElements;            menuElements.map(function(e){                e.quanity = 0            });            this.setState({menuElements: menuElements, orderElements: [], total: 0 });            document.getElementById('cardnum').value = '';        },        proceed: function(){            var orderElements = this.state.orderElements;                if (confirm('Подтвердить?')) {                    var toParse = [];                    var idset = [];                        var cash;                    var coffees = 0;                    var cardnum;                    var newOne = document.getElementById('newClientInput').checked == true;                    if (newOne) {                        cardnum = document.getElementById('cardnum').value;                    } else {                        cardnum = this.props.cardnum;                    }                    if (orderElements.length != 0) {                        for (var i = 0; i < orderElements.length; i++) {                            while (orderElements[i].quanity != 0){                                var shdBeFree = 0;                                if (orderElements[i].actioned != 0) {                                    orderElements[i].actioned--;                                    shdBeFree = 1;                                }                                if (orderElements[i].bonus == 1){                                    coffees++;                                }                                idset.push([orderElements[i].id, shdBeFree]);                                orderElements[i].quanity--;                            }                            if ((orderElements[i].bonus == 1)){                                coffees++;                            }                        }                    }                    console.log(idset);                    barista = document.getElementById('barista_id').value;                    shop    = document.getElementById('shop_id').value;                                        cash = this.state.total;                    toParse = {cardnum: cardnum, idset:idset, cash:cash, coffees:coffees, barista:barista, shop:shop, newOne:newOne};                    console.log(toParse);                    $.post( "api.php?action=saveIncomeCheck", toParse, function(data) {                       showToolTip(data);                    });                this.kEbenyam();            }        },        componentDidMount: function(){             var self = this;            var url  = 'api.php?action=getMenu';            $.getJSON(url, function(result){                elements   = result.elements;                categories = result.categories;            if(!elements || !elements.length){                return;            }                var menuCategories = categories.map(function(c){                    return {                        id:   c[0],                        name: c[1]                    };                });                var menuElements = elements.map(function(p){                    return {                        id: p[0],                        name: p[1],                        price: p[2],                        amount: p[3],                        category: p[4],                        unit: p[5],                        bonus: p[6],                        quanity: 0,                        actioned: 0                    };                });                self.setState({ menuElements: menuElements, menuCategories: menuCategories });            });        },        menuElementClick: function(id){            var orderElements     = this.state.orderElements,                menuElements      = this.state.menuElements,                total             = this.state.total,                inOrdersAlready   = false;            for (var i = 0; i < orderElements.length; i++) {                if (orderElements[i].id == id) {                        inOrdersAlready = true;                    break;                }            }            for (var i = 0; i < menuElements.length; i++) {                if (menuElements[i].id == id) {                    menuElements[i].quanity += 1;                    if (!inOrdersAlready){                        orderElements.push(menuElements[i]);                    }                    total += Number(menuElements[i].price);                    break;                }            }            this.setState({menuElements: menuElements, orderElements: orderElements, total: total});        },        orderElementClick: function(id){            var orderElements = this.state.orderElements,                menuElements  = this.state.menuElements,                action        = this.state.orderClickAction,                total         = this.state.total;                        for (var i = 0; i < orderElements.length; i++) {                if (orderElements[i].id == id) {                    switch(action) {                        case 'remove':                                if (orderElements[i].actioned != 0) {                                    orderElements[i].actioned -= 1;                                    total += Number(orderElements[i].price);                                } else {                                    total -= Number(orderElements[i].price);                                    orderElements[i].quanity -= 1;                                    if (orderElements[i].quanity == 0){                                        orderElements.splice(i, 1);                                    }                                 }                            break;                        case 'applyAction':                                total -= Number(orderElements[i].price);                                orderElements[i].actioned += 1;                                action = 'remove';                            break;                        default:                            console.log('ЧЁ ВООБЩЕ ЗА ХУЙНЯ?!');                    }                    break;              }          }                    this.setState({orderElements: orderElements, total: total, orderClickAction: action});        },        applyAction: function(){             this.setState({orderClickAction: 'applyAction'});            showToolTip('Выбери позицию для применения акции.')        },        render: function(){            var self = this;            var menuCategories   = this.state.menuCategories;            var menuElements     = this.state.menuElements;                menuElements     = menuElements.map(function(s){                    return <menuElement ref={s.id} name={s.name} price={s.price} category={s.category} amount={s.amount} unit={s.unit} bonus={s.bonus} onClick={self.menuElementClick} />;                });            var cats = [];            menuCategories.forEach(function(c){                cats.push(new Array());                i = 1;                while (typeof(cats[c.id-i]) == 'undefined') {                    i++;                }                      var empty = true;                cats[c.id-i].push(<div className="category-separator"><br/><h5>{c.name}</h5><br/></div>);                    menuElements.forEach(function(e){                        if (c.id == e.props.category) {                            cats[c.id-i].push(e);                            empty = false;                        }                    });                    if (empty) { cats.splice([c.id-i]); }                });            if(!menuElements.length){                menuElements = <div><br/><br/><p>Загрузка данных с сервера...</p></div>;            }            var orderElements = this.state.orderElements.map(function(s){                return <menuElement ref={s.id} name={s.name} price={(s.price*(s.quanity-s.actioned)).toFixed(2)} category={s.category} amount={s.amount} unit={s.unit} actioned={s.actioned} bonus={s.bonus} quanity={s.quanity} onClick={self.orderElementClick} />;            });            if(!orderElements.length){                orderElements = <div className="order-war"><i>Сформируйте заказ</i></div>;            }            return (                <div>                    <div className="menu-items">                        <ul id="list-of-items-in-stock">                            {cats}                        </ul>                        <div className="clear"></div>                    </div>                    <div className="order">                        <h3 className="main-title">Заказ</h3>                         <ul id="order-list">                            {orderElements}                            <div className="clear"></div>                        </ul>                        <strong>Сумма заказа: {this.state.total.toFixed(2)}</strong>&#8381                       <div className="order-buttons">                        <button onClick={this.kEbenyam}>Очистить заказ</button>                        <button onClick={this.proceed}>Подтвердить</button>                        <button onClick={this.applyAction}>Применить акцию</button>                       </div>                    </div>                </div>            );        }    });        React.renderComponent(        <clientHandler/>,        document.getElementById('menu-react-mount')    );